service: crm-theam-serverless-api

custom:
  customerProfileImageBucket: 'customerprofileimages'
  customerProfileImagePathPrefix: 'api/uploads/customerProfiles/'
  signedUrlExpirationTime: 3600
  userPoolId: 'eu-west-2_TithjXJyJ'
  clientId: '351sd83rj8pff8nuqbtjc69n3t'
  authFlow: 'ADMIN_NO_SRP_AUTH'
  defaultUserGroup: 'users'
  customerTableName: 'customers'
  customerTableRegion: ${self:provider.region}

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: eu-west-2
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["customerTable", "Arn" ] }
    - Effect: Allow
      Action:
        - s3:*
      Resource: { "Fn::Join": ["", ["arn:aws:s3:::customerprofileimages", "/*" ] ] }
    - Effect: Allow
      Action:
        - cognito-idp:*
      Resource:
        - { "Fn::GetAtt": ["userPool", "Arn" ] }

  environment:
    CUSTOMER_PROFILE_IMAGE_BUCKET: ${self:custom.customerProfileImageBucket}
    CUSTOMER_PROFILE_IMAGE_PATH_PREFIX: ${self:custom.customerProfileImagePathPrefix}
    SIGNED_URL_EXPIRATION_TIME: ${self:custom.signedUrlExpirationTime}
    USER_POOL_ID: ${self:custom.userPoolId}
    CLIENT_ID: ${self:custom.clientId}
    AUTH_FLOW: ${self:custom.authFlow}
    DEFAULT_USER_GROUP: ${self:custom.defaultUserGroup}
    CUSTOMER_TABLE_NAME: ${self:custom.customerTableName}
    CUSTOMER_TABLE_REGION: ${self:custom.customerTableRegion}


functions:
  login:
    handler: auth/login.handler
    memorySize: 128
    events:
      - http:
          path: login
          method: POST

  authActions:
    handler: auth/authActions.handler
    memorySize: 128
    events:
      - http:
          path: auth/requiredAction
          method: POST

  getAllUsers:
    handler: users/getAllUsers.handler
    memorySize: 128
    events:
      - http:
          path: users
          method: GET
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: apiGatewayAuthorizer

  getUsersById:
    handler: users/getUserById.handler
    memorySize: 128
    events:
      - http:
          path: users/{id}
          method: GET
          request:
            parameters:
              paths:
                id: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: apiGatewayAuthorizer

  newUser:
    handler: users/newUser.handler
    memorySize: 128
    events:
      - http:
          path: users
          method: POST
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: apiGatewayAuthorizer

  updateUser:
    handler: users/updateUser.handler
    memorySize: 128
    events:
      - http:
          path: users/{id}
          method: PUT
          request:
            parameters:
              paths:
                id: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: apiGatewayAuthorizer

  deleteUser:
    handler: users/deleteUser.handler
    memorySize: 128
    events:
      - http:
          path: users/{id}
          method: DELETE
          request:
            parameters:
              paths:
                id: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: apiGatewayAuthorizer

  getAllCustomers:
    handler: customers/getAllCustomers.handler
    memorySize: 128
    events:
      - http:
          path: customers
          method: GET
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: apiGatewayAuthorizer

  getCustomersById:
    handler: customers/getCustomerById.handler
    memorySize: 128
    events:
      - http:
          path: customers/{id}
          method: GET
          request:
            parameters:
              paths:
                id: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: apiGatewayAuthorizer

  newCustomer:
    handler: customers/newCustomer.handler
    memorySize: 128
    events:
      - http:
          path: customers
          method: POST
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: apiGatewayAuthorizer

  updateCustomer:
    handler: customers/updateCustomer.handler
    memorySize: 128
    events:
      - http:
          path: customers/{id}
          method: PUT
          request:
            parameters:
              paths:
                id: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: apiGatewayAuthorizer

  deleteCustomer:
    handler: customers/deleteCustomer.handler
    memorySize: 128
    events:
      - http:
          path: customers/{id}
          method: DELETE
          request:
            parameters:
              paths:
                id: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: apiGatewayAuthorizer

  getCustomerProfileImage:
    handler: customers/getProfileImageUrl.handler
    memorySize: 128
    events:
      - http:
          path: customers/{id}/imageUrl
          method: GET
          request:
            parameters:
              paths:
                id: true
              querystrings:
                operation: false
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: apiGatewayAuthorizer

resources:
  Resources:
    uploadBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.customerProfileImageBucket}
    customerTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: customers
        AttributeDefinitions:
          - AttributeName: customerId
            AttributeType: S
        KeySchema:
          - AttributeName: customerId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    userPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: user-pool
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
    userPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: user-pool-client
        UserPoolId:
          Ref: userPool
        ExplicitAuthFlows:
          - ${self:custom.authFlow}
        GenerateSecret: false
    apiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: userPool
        Type: COGNITO_USER_POOLS
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        ProviderARNs:
          - Fn::GetAtt:
              - userPool
              - Arn
